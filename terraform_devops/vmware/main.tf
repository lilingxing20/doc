# ==================== #
# Deploying vSphere VM #
# ==================== #

# Connect to VMware vSphere vCenter
provider "vsphere" {
  user           = var.vsphere-user
  password       = var.vsphere-password
  vsphere_server = var.vsphere-vcenter

  # If you have a self-signed cert
  allow_unverified_ssl = var.vsphere-unverified-ssl
}

# Define VMware vSphere
data "vsphere_datacenter" "dc" {
  name = var.vsphere-datacenter
}

data "vsphere_datastore" "datastore" {
  name          = var.vm-datastore
  datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

data "vsphere_compute_cluster" "cluster" {
  name          = var.vsphere-cluster
  datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

data "vsphere_network" "network" {
  name          = var.vm-network
  datacenter_id = "${data.vsphere_datacenter.dc.id}"
}

data "vsphere_virtual_machine" "template" {
  name          = "${var.vm-template-name}"
  datacenter_id = "${data.vsphere_datacenter.dc.id}"
}


# =================== #
# get CST Time.       #
# =================== #

locals {
   time = "${formatdate("YYYY-MM-DD hh:mm",timeadd(timestamp(),"8h"))}"
}

# Create VMs tags             = local.tags
resource "vsphere_virtual_machine" "vm" {
  count = var.vm-count
  name             = "${var.vm-name}-${count.index + 1}"
  resource_pool_id = "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
  datastore_id     = data.vsphere_datastore.datastore.id
  folder           = var.vm-folder
  

  annotation       = "${var.vm-annotation}\nVM-Application:${var.vm-application}\nVM-Owner:${var.vm-owner}\nVM-CreateDate:${local.time}"
  num_cpus = var.vm-cpu
  memory   = var.vm-ram
  guest_id = var.vm-guest-id
  network_interface {
    network_id = data.vsphere_network.network.id
  }
  disk {
        label = "${var.vm-name}-1-disk"
        size  = var.vm-disk-size
    }
  disk {
        label = "${var.vm-name}-2-disk"
        size  = var.vm-disk-size
        unit_number = 1
    }
  clone {
    template_uuid = data.vsphere_virtual_machine.template.id
    customize {
      timeout = 60
      linux_options {
        host_name = "${var.vm-name}-${count.index + 1}"
        domain    = var.vm-domain
      }
      network_interface {
        ipv4_address = "10.0.0.${count.index}"
        ipv4_netmask = 24
      }
      ipv4_gateway = "10.0.0.1"
    }
  }

}

resource "local_file" "tf_ansible_vars_file_new" {
  count = var.vm-count
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    tf_vm_IP: "{vsphere_virtual_machine.vm[count.index + 1].guest_ip_addresses}"
    DOC
  filename = "./tf_ansible_vars_file.yml"
}

# limit the terraform version
terraform {
  required_version = ">= 0.12.20"
}
