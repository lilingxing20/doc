# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
VAGRANTFILE_API_VERSION = '2'

config_file=File.expand_path(File.join(File.dirname(__FILE__), 'vagrant_variables.yml'))
settings=YAML.load_file(config_file)

LABEL_PREFIX    = settings['label_prefix'] ? settings['label_prefix'] + "-" : ""
NMONS           = settings['mon_vms']
NOSDS           = settings['osd_vms']
NCTLS           = settings['ctl_vms']
NCOMS           = settings['com_vms']
CONTROL_SUBNET  = settings['control_subnet']
TENANT_SUBNET   = settings['tenant_subnet']
STORAGE_SUBNET  = settings['public_subnet']
PUBLIC_SUBNET   = settings['public_subnet']
CLUSTER_SUBNET  = settings['cluster_subnet']
BOX             = ENV['CEPH_ANSIBLE_VAGRANT_BOX'] || settings['vagrant_box']
BOX_URL         = settings['vagrant_box_url']
SYNC_DIR        = settings['vagrant_sync_dir']
MEMORY          = settings['memory']
ETH             = settings['eth']
USER            = settings['ssh_username']
DEBUG           = settings['debug']

ASSIGN_STATIC_IP = !(BOX == 'openstack' or BOX == 'linode')
DISABLE_SYNCED_FOLDER = true


ansible_provision = proc do |ansible|

  ansible.playbook = settings['playbook']
  ansible.skip_tags = settings['skip_tags']

  ansible.groups = {
    'mons'             => (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" },
    'osds'             => (0..NOSDS - 1).map { |j| "#{LABEL_PREFIX}osd#{j}" },
  }
  ansible.groups['mgrs'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['mdss'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['rgws'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['restapis'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['nfss'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['rbd_mirrors'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['clients'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }
  ansible.groups['iscsigws'] = (0..NMONS - 1).map { |j| "#{LABEL_PREFIX}mon#{j}" }

  if DEBUG then                                                                                                                                                    
    ansible.verbose = '-vvvv'
  end
  ansible.limit = 'all'
end


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = BOX
  config.vm.box_url = BOX_URL
  config.ssh.insert_key = false # workaround for https://github.com/mitchellh/vagrant/issues/5048
  config.ssh.private_key_path = settings['ssh_private_key_path']
  config.ssh.username = USER

  # When using libvirt, avoid errors like:
  # "host doesn't support requested feature: CPUID.01H:EDX.ds [bit 21]"
  config.vm.provider :libvirt do |lv|
    lv.cpu_mode = 'host-passthrough'
    lv.volume_cache = 'unsafe'
    lv.graphics_type = 'none'
  end

  # Faster bootup. Disables mounting the sync folder for libvirt and virtualbox
  if DISABLE_SYNCED_FOLDER
    config.vm.provider :libvirt do |v,override|
      override.vm.synced_folder '.', SYNC_DIR, disabled: true
    end
  end

  (0..NMONS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}mon#{i}" do |mon|
      mon.vm.hostname = "#{LABEL_PREFIX}mon#{i}"
      if ASSIGN_STATIC_IP
        mon.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.1#{i}"
      end

      # Libvirt
      mon.vm.provider :libvirt do |lv|
        lv.memory = MEMORY
        lv.random_hostname = true
      end
    end
  end

  (0..NOSDS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}osd#{i}" do |osd|
      osd.vm.hostname = "#{LABEL_PREFIX}osd#{i}"
      if ASSIGN_STATIC_IP
        osd.vm.network :private_network,
          ip: "#{PUBLIC_SUBNET}.2#{i}"
        osd.vm.network :private_network,
          ip: "#{CLUSTER_SUBNET}.2#{i}"
      end

      # Libvirt
      driverletters = ('a'..'z').to_a
      osd.vm.provider :libvirt do |lv|
        # always make /dev/sd{a/b/c} so that CI can ensure that
        # virtualbox and libvirt will have the same devices to use for OSDs
        (0..2).each do |d|
          lv.storage :file, :device => "hd#{driverletters[d]}", :size => '50G', :bus => "ide"
        end
        lv.memory = MEMORY
        lv.random_hostname = true
      end
    end
  end

  (0..NCTLS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}ctl#{i}" do |ctl|
      ctl.vm.hostname = "#{LABEL_PREFIX}ctl#{i}"
      if ASSIGN_STATIC_IP
        ctl.vm.network :private_network,
          ip: "#{CONTROL_SUBNET}.3#{i}"
        ctl.vm.network :private_network,
          ip: "#{TENANT_SUBNET}.3#{i}"
        ctl.vm.network :private_network,
          ip: "#{STORAGE_SUBNET}.3#{i}"
      end

      # Libvirt
      ctl.vm.provider :libvirt do |lv|
        lv.memory = MEMORY
        lv.random_hostname = true
      end
    end
  end

  (0..NCOMS - 1).each do |i|
    config.vm.define "#{LABEL_PREFIX}com#{i}" do |com|
      com.vm.hostname = "#{LABEL_PREFIX}com#{i}"
      if ASSIGN_STATIC_IP
        com.vm.network :private_network,
          ip: "#{CONTROL_SUBNET}.4#{i}"
        com.vm.network :private_network,
          ip: "#{TENANT_SUBNET}.4#{i}"
        com.vm.network :private_network,
          ip: "#{STORAGE_SUBNET}.4#{i}"
      end

      # Libvirt
      com.vm.provider :libvirt do |lv|
        lv.memory = MEMORY
        lv.random_hostname = true
      end

      # Run the provisioner after the last machine comes up
      #com.vm.provision 'ansible', &ansible_provision if i == (NCOMS - 1)
    end
  end

end
